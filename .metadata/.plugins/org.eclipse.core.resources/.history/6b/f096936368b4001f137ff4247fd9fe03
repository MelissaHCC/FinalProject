package com.hccs.shopping.controllers;

import java.net.URI;
import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.hccs.shopping.entities.Product;
import com.hccs.shopping.services.ProductService;

@RestController
@RequestMapping("/products")
public class ProductRestContoller {
	
	private final ProductService service;
	
	public ProductRestContoller(ProductService service) {
		this.service = service;
	}
	
	@GetMapping
	public List<Product> getProducts() {
		return service.findAllProducts();
	}
	
	@GetMapping("{id}")
	public ResponseEntity<Product> getProduct(@PathVariable Long id) {
		return ResponseEntity.of(service.findProductById(id));
	}
	
	@PostMapping
	public ResponseEntity<Product> createProduct(@RequestBody Product product) {
		Product p = service.saveProduct(product);
		URI location = ServletUriComponentsBuilder.fromCurrentRequestUri()
				.path("/{id}")
				.buildAndExpand(p.getId())
				.toUri();
		return ResponseEntity.created(location).body(p);
	}
	
	@PutMapping("{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody Product product) {
		return service.findProductById(id)
				.map(p -> {
					p.setName(product.getName());
					p.setPrice(product.getPrice());
					return ResponseEntity.ok(service.saveProduct(p));
				})
				.orElse(ResponseEntity.notFound().build());
	}
	
	@DeleteMapping("{id}")
	public ResponseEntity<?> deleteProduct(@PathVariable Long id) {
		return service.findProductById(id)
				.map(p -> {
					service.deleteProduct(p)id;
					return ResponseEntity.noContent().build();
				})
				.orElse(ResponseEntity.notFound().build());
	}
	
	@DeleteMapping
	public ResponseEntity<?> deleteAllProducts() {
		service.deleteAllProducts();
		return ResponseEntity.noContent().build();
	}
	

}

























